
//delay of 4 seconds
//
//  delay_time = 4000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){}

int q1 = 3;
int q2 = 5;
int q3 = 6;
int q4 = 9;


int redLEDPin = 10;
int blueLEDPin = 11;
bool redLEDOn = true;

int colorValuePin = A1;

int analogSpeed = 125;


void setup() {
  Serial.begin(9600);
  // put your setup code here, to run once:
  pinMode(q1, OUTPUT);
  pinMode(q2, OUTPUT);
  pinMode(q3, OUTPUT);
  pinMode(q4, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  pinMode(blueLEDPin, OUTPUT);

//  attachInterrupt(digitalPinToInterrupt(SWITCH1), stateUpdate, CHANGE);
}


void loop() {

  int delay_time;
  unsigned long time_now;
  int colorsensorValue;

  digitalWrite(blueLEDPin, HIGH);

  driveUntilBlueLine();

//   if(redLEDOn){
//      digitalWrite(redLEDPin, HIGH);
//      digitalWrite(blueLEDPin, LOW);
//      delay_time = 100;
//      time_now = millis();
//      while(delay_time > millis() - time_now){} 
//      redLEDOn = false;
//   }
//   else{
//      digitalWrite(blueLEDPin, HIGH); 
//      digitalWrite(redLEDPin, LOW);
//      delay_time = 100;
//      time_now = millis();
//      while(delay_time > millis() - time_now){} 
//      redLEDOn = true;
//   }

     colorsensorValue = analogRead(colorValuePin);
     Serial.print(colorsensorValue);
     Serial.print("\n");

//  driveUntilBlueLine();
//  followBlueLine();


//  delay(1000);

//  turnCounterClockwise();
//  
//  delay_time = 8000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){} 
//  
//  veerRight();
//
//  delay_time = 4000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){} 
//
//  veerLeft();
//
//  delay_time = 4000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){} 


//  runMotorsForward();
//  delay_time = 4000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){}  
//
//  runMotorsBackward();
//  delay_time = 4000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){} 
//  
//  pivot();
//  delay_time = 4000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){} 
//  
//  turnCounterClockwise();
//  delay_time = 8000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){} 
//  
//  turnClockwise();
//  delay_time = 8000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){} 
  
}






void runMotorsForward(){
    int delay_time;
    unsigned long time_now;
    
    motorOneForward();
    motorTwoForward();
    
    delay_time = 1000;d
    time_now = millis();
    while(delay_time > millis() - time_now){} 
    
    motorsNeutral();
    
    delay_time = 1000;
    time_now = millis();
    while(delay_time > millis() - time_now){} 
}


void runMotorsBackward(){
    int delay_time;
    unsigned long time_now;
  
    motorOneBackwards();
    motorTwoBackwards();
    
    delay_time = 1000;
    time_now = millis();
    while(delay_time > millis() - time_now){}
    
    motorsNeutral();
    
    delay_time = 1000;
    time_now = millis();
    while(delay_time > millis() - time_now){}
}



void turnClockwise(){
      int delay_time;
      unsigned long time_now;
  
      motorOneForward();

      delay_time = 1400;
      time_now = millis();
      while(delay_time > millis() - time_now){}
      
      motorOneNeutral();
      
      delay_time = 1000;
      time_now = millis();
      while(delay_time > millis() - time_now){}
}

void turnCounterClockwise(){
      int delay_time;
      unsigned long time_now;
      
      motorTwoForward();
      
      delay_time = 1400;
      time_now = millis();
      while(delay_time > millis() - time_now){}

      motorTwoNeutral();

      delay_time = 1000;
      time_now = millis();
      while(delay_time > millis() - time_now){}
}


void pivot(){
    int delay_time;
    unsigned long time_now;
      
    motorOneForward();
    motorTwoBackwards();

    delay_time = 1250;
    time_now = millis();
    while(delay_time > millis() - time_now){}

    
    motorsNeutral();

    
    delay_time = 1000;
    time_now = millis();
    while(delay_time > millis() - time_now){}
}



//Drive until a line and turn functions
void driveUntilBlueLine(){
    int delay_time;
    unsigned long time_now;

    int blueCutoff = 510;
    int blackCutoff = 275;

    motorOneForward();
    motorTwoForward();
    //drive across all colors until blue

    //blue LED on
    //red  290
    //blue 355
    //yellow 410
    

    while(true){
      //if we're in the range of blue
      int value = analogRead(colorValuePin);
      if( value > 330 and value < 370){
         //wait half a second 
         delay_time = 100;
         time_now = millis();
         while(delay_time > millis() - time_now){}
       //measure again
        value = analogRead(colorValuePin);
        //if we still think we're in blue, stop
        if( value > 330 and  value < 370){
            motorsNeutral();
            break;
        }
        
      }
      
    }
    
    delay(3000);

    //turn until sensor is off of blue.
//    motorOneForward();
//    while(analogRead(colorValuePin) > blackCutoff){}
//    motorsNeutral();
    //then follow blue line
  
}



//Line Following Functions
void followBlueLine(){
  int delay_time;
  unsigned long time_now;
  int colorsensorValue;
  
  //left until blue line

  
  int blueCutoff = 400;

  //black : 265
  //blue : 415

  //while not interrupt
  while(true){
     rightMorethanLeft();
//     colorsensorValue = analogRead(colorValuePin);
//     Serial.print(colorsensorValue);
//     Serial.print("\n");
     while(analogRead(colorValuePin) < blueCutoff){
       Serial.print(colorsensorValue);
     Serial.print("\n");
     }
     
     motorsNeutral();
     veerRight();
  }
}


void followRedLine(){
  int delay_time;
  unsigned long time_now;
  int colorsensorValue;
  
  //left until blue line

  int redCutoff = 520;

  //black : 390
  //red : 560
  //while not interrupt
  while(true){
     rightMorethanLeft();
     colorsensorValue = analogRead(colorValuePin);
//     Serial.print(colorsensorValue);
//     Serial.print("\n");
     while(analogRead(colorValuePin) < redCutoff){}
     
     motorsNeutral();
     veerRight();
  }
}

void followYellowLine(){
  int delay_time;
  unsigned long time_now;
  int colorsensorValue;
  
  //left until blue line

  int yellowCutoff = 560;

  //black : 420
  //yellow : 580
  
  //while not interrupt
  while(true){
     rightMorethanLeft();
     colorsensorValue = analogRead(colorValuePin);
     while(analogRead(colorValuePin) < yellowCutoff){}
     
     motorsNeutral();
     veerRight();
  }
}




void veerRight(){
    int delay_time;
    unsigned long time_now;

    leftMorethanRight();


    delay_time = 200;
    time_now = millis();
    while(delay_time > millis() - time_now){}

    motorsNeutral();
}

void veerLeft(){
    int delay_time;
    unsigned long time_now;

    rightMorethanLeft();


    delay_time = 200;
    time_now = millis();
    while(delay_time > millis() - time_now){}

    motorsNeutral();
}


void leftMorethanRight(){
    int motorDifference = 300;

    //drive left motor a little faster
    analogWrite(q1, analogSpeed + motorDifference);
    analogWrite(q2, 0);
    
    analogWrite(q3, analogSpeed);
    analogWrite(q4, 0);
}


void rightMorethanLeft(){
    int motorDifference = 300;

    analogWrite(q1, analogSpeed);
    analogWrite(q2, 0);

    //drive right motor a little faster
    analogWrite(q3, analogSpeed + motorDifference);
    analogWrite(q4, 0);
}





//MOTOR EASY FUNCTIONS

void motorOneForward(){
     //drive motor 1 forward for 2 sec
     analogWrite(q1, analogSpeed);
     analogWrite(q2, 0);
}

void motorOneBackwards(){
     //drive motor 1 forward for 2 sec
     analogWrite(q1, 0);
     analogWrite(q2, analogSpeed);
}

void motorOneNeutral(){
     analogWrite(q1, 0);
     analogWrite(q2, 0);
}


//Right Motor
void motorTwoForward(){
     analogWrite(q3, analogSpeed);
     analogWrite(q4, 0);
}


void motorTwoBackwards(){
     analogWrite(q3, 0);
     analogWrite(q4, analogSpeed);
}


void motorTwoNeutral(){
     analogWrite(q3, 0);
     analogWrite(q4, 0);
}


void motorsNeutral(){
  motorOneNeutral();
  motorTwoNeutral();
}
