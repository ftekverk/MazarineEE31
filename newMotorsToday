//delay of 4 seconds
//
//  delay_time = 4000;
//  time_now = millis();
//  while(delay_time > millis() - time_now){}

#include "driving.h"

//Bot that follows the red LED
bool bot1 = false;
bool bot2 = false;

//blue ON ranges:
  //blue:
  //red:
  //yellow:
int blueLEDON_BlueThresholdLow = 330;
int blueLEDON_BlueThresholdHigh = 350;
int blueLEDON_RedThresholdLow = 236;
int blueLEDON_RedThresholdHigh = 250;
int blueLEDON_YellowThresholdLow = 485;
int blueLEDON_YellowThresholdHigh = 495;
int blueLEDON_BlackThresholdLow = 160;
int blueLEDON_BlackThresholdHigh = 173;



//red ON ranges:
  //blue:
  //red:
  //yellow:
//int redLEDON_BlueThresholdLow = 165;
//int redLEDON_BlueThresholdHigh = 165;
//int redLEDON_RedThresholdLow = 165;
//int redLEDON_RedThresholdHigh = 165;
//int redLEDON_YellowThresholdLow = 165;
//int redLEDON_YellowThresholdHigh = 165;


//Color Detection
int redLEDPin = 7;
int blueLEDPin = 4;
int colorValuePin = A1;

//Collision Detection
int sensorPinA = A4;
int diagonalThreshold = 35;
int perpendicularThreshold = 55;


void setup() {
  Serial.begin(9600);
  // put your setup code here, to run once:
  pinMode(q1, OUTPUT);
  pinMode(q2, OUTPUT);
  pinMode(q3, OUTPUT);
  pinMode(q4, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  pinMode(blueLEDPin, OUTPUT);


//    pinMode( LED_BUILTIN, OUTPUT );
  //  attachInterrupt(digitalPinToInterrupt(SWITCH1), stateUpdate, CHANGE);

}


void loop() {
//
//    int delay_time;
//    unsigned long time_now;
//    int colorsensorValue;
//
//    colorsensorValue = analogRead(colorValuePin);
//    Serial.print(colorsensorValue);
//    Serial.print("\n");
//
////  turnCounterClockwise();
//
  if(bot1){
    digitalWrite(redLEDPin, HIGH);
    //drive until wall (collision)
    driveUntilCollisionDiagonal();
    delay(1000);
    //turn 180
    turnClockwise();
    //drive until red line
//    driveUntilLine(redLEDON_RedThresholdLow, redLEDON_RedThresholdHigh);
    //follow red
    
    //back up
    //90 degrees counterclockwise
    //drive until yellow
    //follow yellow until wall
    //turn counter clockwise
    //drive until the corner (hard code time)
    
  }
  else if(bot2){
    digitalWrite(blueLEDPin, HIGH);
    //drive until wall (collision)
    driveUntilCollisionDiagonal();
    delay(1000);
    //turn 180
    pivot180CounterCC();
//    turnCounterClockwise();
    delay(1000);
    //drive until blue line
    driveUntilLine(blueLEDON_BlueThresholdLow, blueLEDON_BlueThresholdHigh);
    //follow blue
      //turn
      turnCounterClockwiseUntilColor(blueLEDON_BlueThresholdLow, blueLEDON_BlueThresholdHigh);
      //follow yellow until collision
      followBlueLineUntilPerpendicularCollision();
    //back up
    runMotorsBackward();
    //90 degrees Cclockwise
    pivot90CounterC();
    //drive until yellow
    driveUntilLine(blueLEDON_YellowThresholdLow, blueLEDON_YellowThresholdHigh);
    //follow yellow until wall
        //turn

        //d
    
    //turn clockwise
    //drive until the corner (hard code time)
    
  }
  //testing code
  else{
    digitalWrite(blueLEDPin, HIGH);
      int colorsensorValue = analogRead(colorValuePin);
     Serial.print(colorsensorValue);
     Serial.print("\n");
    delay(500);
    
  }


}


void driveUntilCollisionDiagonal(){
     int delay_time;
     unsigned long time_now;

     int value = 0;
     forward();
      
    while(true){
      while(analogRead(sensorPinA) < diagonalThreshold){}
      delay_time = 100;
      time_now = millis();
      while(delay_time > millis() - time_now){}
      if(analogRead(sensorPinA) > diagonalThreshold){
        motorsNeutral();
        break;
      }
    }
      
      delay(2000);
}


void followBlueLineUntilPerpendicularCollision(){
  
  int delay_time;
  unsigned long time_now;
  int colorsensorValue;
  
  //left until blue line
  
  int blueCutoff = blueLEDON_BlueThresholdLow - 10;

  //while not interrupt
  while(analogRead(sensorPinA) < perpendicularThreshold + 50){

    
     rightMorethanLeft();
     while(analogRead(colorValuePin) < blueCutoff){}
     motorsNeutral();
     veerLeft();
  }
  
  delay(1000);
  
  
}






//Drive until a line (using time delay) and turn functions
void driveUntilLine(int ThresholdLow, int ThresholdHigh){
    int delay_time;
    unsigned long time_now;

    motorOneForward();
    motorTwoForward();

    while(true){
      int value = analogRead(colorValuePin);

      if( value > ThresholdLow - 5 and value < ThresholdHigh + 5){
         //wait
         delay_time = 100;
         time_now = millis();
         while(delay_time > millis() - time_now){}
         //measure again
         value = analogRead(colorValuePin);
         //if we still think we're in the color, stop
         if( value > ThresholdLow - 5 and  value < ThresholdHigh + 5){
            motorsNeutral();
            break;
        }
      }
    }
    
    delay(3000);                                                                                                                                                

    //turn until sensor is off of blue.
//    motorOneForward();
//    while(analogRead(colorValuePin) > blackCutoff){}
//    motorsNeutral();
    //then follow blue line
  
}



//Line Following Functions
void followBlueLine(){
  int delay_time;
  unsigned long time_now;
  int colorsensorValue;
  
  //left until blue line
  
  int blueCutoff = blueLEDON_BlueThresholdLow - 10;

  //while not interrupt
  while(true){
     rightMorethanLeft();
     while(analogRead(colorValuePin) < blueCutoff){}
     motorsNeutral();
     veerLeft();
  }
}



//pivots off of a color, then onto the color again
void turnCounterClockwiseUntilColor(int ThresholdLow, int ThresholdHigh){
   int delay_time;
   unsigned long time_now;
      
    motorOneForward();
    //pivot onto black
    int colorCutoff = ThresholdLow - 10;

    while(analogRead(colorValuePin) > ThresholdHigh){}

    //pivot onto blue
    delay_time = 150;
    time_now = millis();
    while(analogRead(colorValuePin) < colorCutoff){}
    motorsNeutral();
    
    delay_time = 1000;
    time_now = millis();
    while(delay_time > millis() - time_now){}
}





